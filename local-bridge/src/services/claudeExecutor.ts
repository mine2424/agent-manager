import { spawn, ChildProcess } from 'child_process';
import { EventEmitter } from 'events';
import path from 'path';

interface ExecutionResult {
  success: boolean;
  exitCode: number | null;
  output: string[];
  filesChanged?: string[];
  duration: number;
}

export class ClaudeExecutor extends EventEmitter {
  private process: ChildProcess | null = null;
  private outputBuffer: string[] = [];
  private startTime: number = 0;

  async execute(command: string, workingDirectory: string): Promise<ExecutionResult> {
    return new Promise((resolve, reject) => {
      if (this.process) {
        reject(new Error('Êó¢„Å´ÂÆüË°å‰∏≠„ÅÆ„Éó„É≠„Çª„Çπ„Åå„ÅÇ„Çä„Åæ„Åô'));
        return;
      }

      this.startTime = Date.now();
      this.outputBuffer = [];

      console.log(`üìÇ Working directory: ${workingDirectory}`);
      console.log(`üí¨ Command: ${command}`);

      // Claude CLI„ÅÆÂÆüË°å
      const claudePath = process.env.CLAUDE_CLI_PATH || 'claude';
      this.process = spawn(claudePath, ['code'], {
        cwd: workingDirectory,
        env: {
          ...process.env,
          // Claude CLIÁî®„ÅÆÁí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆö
        }
      });

      // Ê®ôÊ∫ñÂÖ•Âäõ„Å´„Ç≥„Éû„É≥„Éâ„ÇíÈÄÅ‰ø°
      if (this.process.stdin) {
        this.process.stdin.write(command + '\n');
        this.process.stdin.end();
      }

      // Ê®ôÊ∫ñÂá∫Âäõ„ÅÆÂá¶ÁêÜ
      this.process.stdout?.on('data', (data) => {
        const output = data.toString();
        this.outputBuffer.push(output);
        this.emit('output', output);
      });

      // Ê®ôÊ∫ñ„Ç®„É©„ÉºÂá∫Âäõ„ÅÆÂá¶ÁêÜ
      this.process.stderr?.on('data', (data) => {
        const error = data.toString();
        this.outputBuffer.push(`[ERROR] ${error}`);
        this.emit('error', error);
      });

      // „Éó„É≠„Çª„ÇπÁµÇ‰∫ÜÊôÇ„ÅÆÂá¶ÁêÜ
      this.process.on('close', (code) => {
        const duration = Date.now() - this.startTime;
        const result: ExecutionResult = {
          success: code === 0,
          exitCode: code,
          output: this.outputBuffer,
          duration,
          filesChanged: [] // TODO: Â§âÊõ¥„Åï„Çå„Åü„Éï„Ç°„Ç§„É´„ÇíÊ§úÂá∫
        };

        console.log(`‚úÖ Process exited with code ${code} (duration: ${duration}ms)`);
        
        this.cleanup();
        resolve(result);
      });

      // „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
      this.process.on('error', (error) => {
        console.error('‚ùå Process error:', error);
        this.cleanup();
        reject(error);
      });
    });
  }

  stop(): void {
    if (this.process) {
      console.log('üõë Stopping process...');
      this.process.kill('SIGTERM');
      this.cleanup();
    }
  }

  private cleanup(): void {
    this.process = null;
    this.outputBuffer = [];
    this.removeAllListeners();
  }
}